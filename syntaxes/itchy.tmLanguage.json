{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Itchy",
	"patterns": [
		{
			"include": "#code"
		}
	],
	"repository": {
		"code": {
			"patterns": [
        {
          "include": "#function-literal"
        },
        {
          "include": "#when-literal"
        },
        {
          "include": "#hinted"
        },
        {
          "include": "#sprite-literal"
        },
        {
          "include": "#control-literal"
        },
        {
          "include": "#literals"
        },
        {
          "include": "#comments"
        },
        {
          "match": "([a-zA-Z]\\w*)",
          "name": "variable.name"
        }
			]
		},
    "comments": {
      "patterns": [
        {
          "match": "//[^\r\n]*",
          "name": "comment.line.double-slash.itchy"
        },
        {
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "name": "comment.block.itchy"
        }
      ]
    },
		"control-literal": {
			"patterns": [
				{
					"match": "\\b(let)\\b",
          "captures": {
            "1": {
              "name": "storage.type.itchy"
            }
          }
				},
				{
					"match": "\\b(if|else)\\b",
					"name": "keyword.control.conditional.itchy"
				},
				{
					"match": "\\b(loop)\\s+(count|until|forever)\\b",
					"name": "keyword.control.itchy"
				},
        {
          "match": "\\b(return)\\b",
          "name": "keyword.control.itchy"
        }
			]
		},
		"sprite-literal": {
			"match": "\\b(sprite)\\s+([a-zA-Z]\\w*)\\b",
      "captures": {
        "1": {
          "name": "storage.modifier.itchy"
        },
        "2": {
          "name": "entity.name.class.itchy"
        }
      }
		},
    "when-literal": {
      "match": "\\b(when)\\s+([a-zA-Z]\\w*)\\b",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "constant.language"
        }
      }
    },
    "function-literal": {
      "match": "\\b(fast\\s+)?(func)\\s+([a-zA-Z]\\w*)\\b",
      "captures": {
        "1": {
          "name": "keyword.other.itchy"
        },
        "2": {
          "name": "keyword.other.itchy"
        },
        "3": {
          "name": "entity.name.function.itchy"
        }
      }
    },
    "hinted": {
      "match": ":\\s*(string|double|boolean|void)\\b",
      "captures": {
        "1": {
          "name": "entity.name.class.itchy"
        }
      }
    },
    "literals": {
      "patterns": [
        {
          "match": "\\b(true|false)\\b",
          "name": "constant.language.itchy"
        },
        {
          "match": "0[xX][0-9a-fA-F]+",
          "name": "constant.numeric.hex.itchy"
        },
        {
          "match": "[0-9]+",
          "name": "constant.numeric.integer.itchy"
        },
        {
          "match": "[0-9]+\\.[0-9]+",
          "name": "constant.numeric.itchy"
        },
        {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double"
        },
        {
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "match": ",",
              "name": "support.other"
            },
            {
              "include": "#code"
            }
          ]
        },
        {
          "match": "([a-zA-Z]\\w*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function"
            }
          }
        }
      ]
    }
	},
	"scopeName": "source.itchy"
}